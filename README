

                 Highest Level README File for WARP3D
                 ====================================

                   Last Update: September 5, 2018

                  Version 17.9.1 on all platforms

Late breaking news:
==================

See new part of description below: Components of WARP3D Distribution

The ready-to-run executables are built using Intel Fortran/MKL 18.0.x
with options that allow the executable to run on a wide-range of
Intel 64 bit processors.

Our ready-to-run executables now *require* that your processor(s)
support the AVX (vector) instruction set as a minimum.
The included executables will not run on older processors.

Processors with AVX support became available in early 2011 and include:

  2nd Generation Intel® Core™ i7 Processors
  2nd Generation Intel® Core™ i5 Processors
  2nd Generation Intel® Core™ i3 Processors
  Intel® Xeon® Processor E5 Family
  Intel® Xeon® Processor E3 Family

  + all newer processors

 --> In future releases of WARP3D we plan to require processors with
     AVX2 instruction support.

The best performance - especially on the newest processors -
can be obtained only by re-compiling. If your processor
supports the AVX2 or AVX512 instruction set, there will be a
boost in performance across the entire code from the increased vector
register lenghts in AVX2 and AVX512.

Re-building scripts provided in the distribution instruct 
the compiler to optimize for the hardware on which the 
compilation is executed.

Contents:
=========

 0. Components of WARP3D Distribution

 1. Obtaining & Installing WARP3D on Linux, Windows, MacOS

 2. Running WARP3D

 3. WARP3D Subdirectories and Files

 4. Supported Computer Systems

 5. Changing the source code and re-building the executables

 6. Obsoleted Code and Features


 Windows users - please also see the additional README_Windows_Users

 MacOS users - please also see the additional README_MacOS_Users

 Linux users - please also see the additional file README_Linux_Users

===========================================================================

0. COMPONENTS OF WARP3D DISTRIBUTION

The WARP3D system contains these components:

  - The WARP3D executable for Linux, Windows, MacOS.
    This is the analysis "engine". It reads full model
    descriptions from one or more text files (like Abaqus .inp files),
    performs the analysis as requested and outputs various types of
    results files for post-processing.

    The WARP3D executable does NOT handle any graphical pre- or post-
    processing.

    The code may be run interactively through a terminal window (Linux,
    MacOS) or a CMD shell (Windows) or the Bash shell (Cygwin on Windows).

    On supercomputers, the code most likely will be executed in batch mode
    via PBS, SLURM, etc type scheduling systems.

  - The patwarp executable. This standalone program converts a model neutral
    (text) file that conforms to Version 2.5 (and later) of the
    Patran specification.

    Many mesh generation programs have options to output such a neutral file for
    the finite element model - it is NOT required that you use Patran to create
    the neutral file. This neutral file format is widely distributed and
    has become a de facto standard.

    On Linux systems, patwarp also offers to partition the mesh into domains using
    Metis for specialized executions using the MPI+threads version of WARP3D.
    (The default partitioning built-into WARP3D removes the need for this
    Metis partitioning for nearly all users).

  - The warp3d3exii Python program. This standalone program reads (1) a condensed
    description of the model (a text file written by WARP3D) and (2) condensed
    versions of computational results written by WARP3D (text or stream formats).
    warp3d2exii then writes a *.exo (stream) file which can be post-processed
    by a variety of free and commercial software. We use the free software
    ParaView for this purpose and recommend it highly.

  - The standalone program combine_mpi_result_files (for Linux).  When WARP3D
    with MPI + threads executes, results files are written by each MPI rank.
    Example: 64 MPI ranks with stress output for load (time) step 100. 64
    partial results files are written, 1 by each MPI rank. The program
    combine_mpi_results_files collects these partial results files, combines them
    as needed, and writes a single file of stresses (this example) as though the
    threads-only version had been executed.

  - The src directory has the source code for WARP3D and scripts to rebuild
    the executables. The linux_packages directory has source code
    files for MPI interfaces used by WARP3D, for the hypre solver,
    and for the Metis domain decomposition code. 

  - The verification directory provides extensive suites of automatic
    testing for WARP3D - we use these test daily to confirm no code
    regressions. Users are encouraged to examine/execute these 
    analyses.

1. OBTAINING & INSTALLING WARP3D

The WARP3D User Guide/Manual is included in the distribution in PDF 
form (the manual directory), complete with full bookmarks.

The full distribution: source code, ready-to-run executables,
re-building scripts for each platform, updated user manual (pdf),
verification suites is available as a single download 
on:   www.warp3d.net

The website provides two distribution styles, one oriented towards
OSX / Linux users and one for Windows users (Windows 7, 8, 10).
The difference is just in the tools used to compress/uncompress the files.

Files for MacOS / Linux users:
---------------------------------
 o  The entire WARP3D distribution is available for download
    as one (~280 MB) .tar.gz file. The most current version
    will be shown on the web site. Clicking the link will initiate
    the download.

 o  We recommend downloading the tar.gz file into /opt, /usr/local/share,
    /usr/local/bin or into the home directory of a specific user.

    When installed into a user home directory, root access is
    *not* required.

    If located elsewhere, the permissions will require updating
    to allow desired levels of access.

    The install process for WARP3D does *not* put any file outside
    the directory created by the uncompress/untar operations.

    MacOS
     Put the < >.tar.gz file in a convenient location.
     Double click on the file while using Finder. The file will be
     expanded.

      or

     in a Terminal window, put the < >.tar.gz in a folder where the distribution
     will be accessed. Enter the command:  tar -xvzf < >temp.tar.gz

    Linux -- To unzip and then untar a file named < >.tar.gz:
      tar -xvzpf < >.tar.gz

    where < > is replace by the actual, downloaded file name.

 o  Look through the remainder of this README

 o  Quick start instructions and more detailed instructions are provided
    in the README_Linux_Users or README_MacOS_Users

 o  The ready-to-run executables for MacOS and Linux are included in the
    distribution. No other libraries, compilers, etc. are required (but
    some minor configuration is required, see installation instructions).

    The MacOS and Linux versions are compiled to run only in 64-bit mode.


Files for Windows Users:
------------------------
 o  The entire WARP3D distribution is available for download as one
    (~280 megabyte) .zip file called warp3d_distribute_###.zip.

 o  To unzip a file named (for example) temp.zip on Windows:
      <Right click the file temp.zip and choose Extract All...>

 o  The directory, subdirectories and files created by the unzip process can be
    located where ever you chose. WARP3D does *NOT* require installation in
    c:\Program Files (for example). The unzip process does *NOT* create or place
    any files outside of the install directory created by the unzip. The
    (unzip) install process does *NOT* modify the Windows Registry.

    WARP3D can thus be installed and used entirely within a user's account
    without any system level access. For example, a user can install WARP3D
    with this process in their Documents folder.

 o  Examine the README_Windows_Users - viewable in WordPad,
    NotePad, NotePad++, ....

 o  The ready-to-run executable for Windows is included
    in the distribution. No other libraries, Intel software, etc. are required.
    No additional configuration is required.

==========================================================================
2. RUNNING WARP3D

WARP3D does not have a graphical user interface (GUI). The program
is initiated from the command line in a shell program.

See the Quick Start section in the files README_Linux_Users, README_MacOS_Users
and README_Windows_Users to get started running WARP3D.

==========================================================================
3. WARP3D SUBDIRECTORIES AND FILES

  src  (a directory)
  ===

  Fortran source code and processes to re-build the executables on each hardware
  platform.

  Linux and MacOS users:
     We provide a general building script, Makewarp.bash
     which interactively guides you through the
     building process for both threaded (OpenMP) and MPI+threaded versions.
     **** This is the ONLY method you should use to build the code ****

  Windows users:
     We provide a general building script, Makewarp.bat
     The is a bat file executed in a command shell
     It compiles and binds a new executable using the Windows nmake program.
     **** This is the ONLY method you should use to build the code ****

  Refer to the README file for each specific platform for full details on
  re-building the code.


  run_<platform>  (multiple directories)
  ==============

  Location for executable files. Our build scripts put them
  in this directory. We distribute ready-to-run executables for Linux, MacOS
  and Windows. The Makewarp.bash and Makewarp.bat scripts create the
  object and run directories as needed during the build process. Examples:
  run_linux_em64t, run_mac_os_x,..
  The Windows, Linux and MacOS executables support parallel execution using
  threads (OpenMP) and shared-memory.
  Linux also supports parallel execution using a hybrid MPI + OpenMP framework.
  This executable is named warp3d.mpi_omp while the
  version that uses only OpenMP for threaded execution is called warp3d.omp.

  run_windows_64  (directory)
  ===========================

  Pre-compiled, thread-parallel executable for warp3d. The patwarp
  executable runs serial only. The executables are statically linked.

  The Intel compiler system is NOT required to use the ready-to-run
  executable provided is this directory.

  The MPI version of WARP3D is not supported on Windows.

  The Intel sparse solver (Pardiso) is included in these executables - both
  the direct and iterative options in Pardiso. Pardiso runs in parallel
  using threads if multiple cores are available.

  The Windows version of WARP3D uses OpenMP (threads) to achieve very efficient
  parallel execution.

  Note: we continue to have issues on some Windows 7/8/10 machines with the
        system dll:  libiomp5md.dll
        We include a current version of this DLL in the run_windows_64
        directory.

        In some instances, we see the warp3d.exe in that same directory
        fail to start properly with a Windows pop-up window saying The
        Application Failed to Start Properly ...

        Renaming libiomp5md.dll to save_libiomp5md.dll fixes the problem.

  run_linux_em64t  (a directory)
  ==============================

  Pre-compiled executables for WARP3D, patwarp, combine_mpi_results.
  Both threaded (OpenMP) and MPI + OpenMP versions are provided for WARP3D.

    a) To use the threads only version, no Intel compiler/MPI
       software is required to be installed on your system

    b) To use the MPI version, you must have Intel MPI runtime
       software installed that provides the runtime setup for MPI jobs

  WARP3D on Linux uses a number of shared libraries, including MKL, at run time.
  These are included with the WARP3D distribution and are located in the
  directory linux_packages of the distribution.

  By using the latest shared MKL libraries included in the distribution on Linux,
  the highest performance on each type of hardware is reached w/o re-compiling.
  Intel permits re-distribution of these MKL libraries.

  To re-build the threaded WARP3D executable, you need the Intel Fortran compiler
  suite installed (which includes the MKL library). To re-build the MPI +
  OpenMP threaded version, the Intel MPI system must be installed.

  run_mac_os_x  (a directory)
  ===========================

  Pre-compiled executables for WARP3D, patwarp, combine_mpi_results.

  The MacOS version of WARP3D uses OpenMP (threads) to achieve very efficient
  parallel execution.

  The Intel sparse solver (Pardiso) is included in these executables - both
  the direct and iterative options in Pardiso.

  WARP3D on MacOS is an almost statically linked executable. One library
  is dynamically linked: pthreads. This library is part of MacOS.

  The Intel Fortran compiler system is NOT required to use the ready-to-run
  executable provided is this directory.

  To re-build the WARP3D executable, you need the Intel Fortran compiler
  system (which includes the MKL library). The building process runs
  from the Terminal window.

  patwarp  (directory)
  ====================

  Fortran code and compile scripts for the patwarp program.
  In a shell window, just execute the compile script and choose
  the platform on which to compile.

  Note that each platform has a different compile script. Linux and
  MacOS have Bash scripts. Windows has a .bat file. The executables
  are placed into the warp3d_project/run_<platform> directory.

  MacOS and Windows require only the Intel Fortran compiler.

  Linux also requires the C-compiler (gcc) to build Metis .o files.

  The patwarp program converts Patran neutral files for finite element
  models into WARP3D input files. It also supports definition of 9, 12,
  15 node transition elements that are partially supported by Patran.

  On Linux patwarp includes/uses the METIS package to provide mesh partitioning
  for MPI-based parallel execution. METIS is included in the patwarp directory,
  and is automatically compiled from the patwarp compile script for Linux.

  warp3d2exii (directory)
  =======================

  Contains a Python (2.7.3 or later) program to create an ExodusII (.exo) database
  for post-processing by ParaView and other programs.

  The program is warp3d2exii (formerly named pat2exII)

  warp3d2exII does the following:

    1) reads flat model description file produced by WARP3D
       (see manual Section 2.12)

    or

    2) reads a Patran (text) neutral file for the model written by
       WARP3D (see manual Section 2.12)  or some other program.


    and then reads WARP3D generated "flat" result files (_text, _stream
    or _text.gz)

  The Exodus II database can be used by ParaView to post-process computed
  displacements, strains, stresses, etc. on the FE model. It is an
  exceptionally powerful tool (open source) with key visualization
  capabilities usable with minimal introduction to the program.

  The Cubit program can use the database to access the FE model for
  further meshing, re-meshing, new constraints, boundary conitions etc.

  The Python source code for warp3d2exII runs on Windows, Linux and
  MacOS. A Python environment on your machine will be
  needed.

  ===>>  Python version 2.7.3 or later is required to run warp3d2exii.

         See additional discussion about Python requirements in the README
         file of this directory.


  license_agreement  (a file)
  ===========================

  Terms and conditions of the no cost Open Source license with terms and
  conditions of the University of Illinois/NCSA Open Source License.

  linux_packages  (a directory)
  =============================

  This directory contains the source code, include files and shared
  libraries needed to provide the additional functionality on Linux.
  Specifically MKL, MPI and the hypre iterative solver from LLNL.

  If you are building from the GitHub source, complete loading of 
  these libraries by running the bash shell script

        install_libs_from_remote

  in the WARP3D directory.

  manual  (a directory)
  =====================

  Contains the WARP3D users manual, warp3d_manual_<version>.pdf. There
  is one .pdf file for the entire manual. It is fully bookmarked.

  This is the technical report published by the University of Illinois.
  The WARP3D manual is written using a combination of MS-Word, LaTeX,
  and QuickSilver (formerly named Interleaf).

  We are gradually converting the entire manual to LaTex. Let us know if
  you want the .tex docs and all figures.


  warp3d_script_linux_openmp
  warp3d_script_linux_hybrid
  warp3d_script_windows
  warp3d_script_mac_os_x  (4 files)
  =================================

  Simple Bash-shell scripts that can be customized to run WARP3D for OpenMP
  parallel execution and combined MPI + OpenMP parallel execution.
  Our groups put versions of these scripts in the ~/bin directory of users.



  verification (multiple subdirectories)
  ============

  Users are highly encouraged to exercise the software verification
  facilities located here.

  This is our key tool to verify most all of WARP3D after making
  source code changes.

  There are three bash scripts (run_tests.bash, run_J_tests.bash, 
  run_mpi_tests.bash).

  These interactive scripts conduct automated execution of WARP3D
  over a wide array of models/simulations and compare results to
  known good values - indicating clearly when differences arise.

  The scripts present a menu of simulations to execute. The longest
  verification problems run in a few minutes on 4-8 cores.

  On Windows, the Bash shell and Perl programs must be available.
  We highly recommend the free Cygwin software: https://www.cygwin.com


  example_problems  (5 directories)
  ================

  A series of example problems that illustrate features of WARP3D.
  Most are well documented and some have Patran.out files (neutral files
  for the models)

  Four directories are provided:

    example_problems_for_READMEs - a few problems referred to in platform
        specific README files just to test that WARP3D is installed
        properly

    manual_examples_chpt1 - WARP3D input files and supporting
        files (e.g. Python scripts to make plots) for the
        example problems described in Section 1.2 of the User Manual.

    example_problems_threads - a large collection of simple to
        complex problems set up to run in parallel using only threads.
        See README in this directory for more details.

    example_problems_mpi - problems set up to run in parallel using a
        combination of MPI and threads (Linux only at this time).
        These examples use the CPardiso & hypre (distributed iterative)
        equation solver. See README in this directory for more details.

    example_problems_cp - a set of problems that illustrate a variety of
        applications of the crystal plasticity material model. See README
        in this directory for more details.


  combine_mpi_results_files  (a directory)
  =========================

  When WARP3D runs in parallel using MPI with domain decomposition of
  the mesh, patran and flat result files are constructed piecewise by each
  process. The pieces must be combined into a single result
  file with Patran or flat file format. This directory contains the source code
  and compile script to build the combine program for each platform.

  The compile script puts the executable in the appropriate run_<platform>
  directory.


  fracture_models  (a directory)
  ===============

  A set of complete, ready-to-run models for various fracture simulations.

  The README file in the directory describes each model.

  standard_fracture_specimens (a directory)
  ===========================

  A set of complete, ready-to-run models for various standard fracture specimens (CT, 
  SCT, SEB, SSY).

  patran_templates  (a directory)
  ================

  A set of template files for use with Patran. The
  template files are accessed by Patran when the user imports
  WARP3D results (displacements, nodal strain/stresses, element
  strains/stresses, etc.) The template files inform Patran
  of the ordering of data for each node or element in the results files,
  the label that Patran displays for the result types (e.g. sigma-xx)
  in the menu of choices for display.

  We generally put the template files into the <patran>/res_templates directory
  and invoke a chmod o+rx on them. However, the template files can be placed
  and any convenient location - Patran always asks for the location.

  We often now make a copy of the template files in directories where
  Patran models are created and results post-processed. This is just for
  convenience when Patran requests the location of the temp files.

  These files are not used by ParaView for post-processing.

  packet_dir  (a directory)
  ==========

  Contains our implementation of a sample Fortran program to read the
  binary packets file of results that WARP3D can generate.
  See Appendix F of the User Manual for details about packet results.


  FEACrack_Validation.pdf  (a file)
  =======================

  Quest Reliability of Boulder, Colorado develops
  and markets a PC-based, graphical interface to WARP3D, ABAQUS
  and ANSYS for 3-D fracture analysis. As part of their development, QR
  validates the K and J solutions obtained from WARP3D, ABAQUS & ANSYS
  with each other and with analytical solutions when available.

  old_code (a directory)
  ========

  Code no longer maintained as part of the distribution but that may be
  of some use to researchers.


==========================================================================
4.0 SUPPORTED COMPUTER SYSTEMS

   All processors with AXV and newer instructions sets supported
   by the distributed executables.

   - Windows: 10 (W7,8 likely will work)
              64-bit version
              WARP3D uses thread-based, parallel execution.
              executable built using Windows 10

   - Linux: Intel64 (EM64T) processors. We have tested the build
            process and executables on Red Hat/Centos 7.4 Server,
            Ubuntu 16.04. The included executables
            are built on RedHat 7.4 and verified on Ubuntu 16.04 LTS.
            There are 2 WARP3D executables:
                - Parallel execution using only threads
                - Parallel execution using a combination of MPI
                  and threads

   - OSX: on Intel 64-bit processors (Core 2 Duo and later).
           The executable is built on 10.13.5.

==========================================================================
5.0 Changing source code and re-building the executables

 Most users simply download the WARP3D distribution and run their analyses
 with the distributed, ready-to-run executable files for
 Windows, Linux and Mac OSX.

 The distributed executables for threads only are created such that they
 do NOT require the Intel compilers/libraries to be installed
 on the user's machine.

 For those users who wish to modify the WARP3D source code
 and re-build executables, the Intel compiler system will need to
 be installed. Re-building WARP3D requires only the Fortran Composer XE
 (not Intel C or C++).

 On Windows, we use Intel Visual Fortran Composer XE 2018 for Windows
   which includes the Intel Math Kernel Library

 On Linux, we use Intel Fortran Composer XE 2018 for Linux
   which includes the Intel Math Kernel Library. The Intel MPI system
   must be installed to run and re-build the MPI + OpenMP version.

 On OSX, we use Intel Fortran Composer XE 2018 for OSX
   which includes the Intel Math Kernel Library.

 The compile scripts (Makewarp.bash and Makewarp.bat) in the src
 directory verifies the required compiler system is installed.

 Use of the scripts Makewarp.bash (Linux, OSX) and Makwarp.bat (Windows)
 is the ONLY recommended process to re-build the executables. The
 Makewarp.bash script asks a few questions, then builds the executable.

 Makewarp.bat asks no questions -- it just runs. Requires access to nmake
    from Microsoft
 Makewarp_jom.bat runs parallel compiles.  Requires replacement for 
    nmake to support -j option (see README_for_Windows_Users)


==========================================================================
6.0 Obsoleted Code and Features

Moved to the old_code directory in July 2011.

  mesh_generators  (a directory)
  ===============

  Prof. Jonas Faleskog at KTH in Stockholm has developed a series
  of F90 programs to generate 3-D fracture models, primarily for
  surface cracks located in rectangular prisms, cylinders and
  elbows. these programs are included in the WARP3D distribution
  along with their manuals and sample input files. These programs
  are research oriented but are relatively simple to use and save
  enormous manpower in  building surface crack models with focused
  meshes and with cell elements on crack plane for growth analyses.

  Also included is a mesh generator that builds 3-D models for the
  SSY boundary layer model with or without an initially blunt
  tip. This F90 program can also be used to construct the core
  mesh to put cracks in geometrically complex configurations.

  pat_movie  (a directory)
  =========

  Contains a set of tools and instructions to automate the
  process of creating movies using the post-processing features
  in Patran. A PowerPoint presentation gives an overview of the
  movie making procedures.

  nasa_solver (a directory)
  ===========

  The VSS sparse direct solver. Replaced by the far faster
  MKL Pardiso solver.
  The full source code is here.

  EBE_solver (a directory)
  ==========

  The element-by-element pre-conditioned conjugate gradient
  solver. Full source code and setup.

  No longer needed with hypre MPI solver available.





END OF README

 

                  Highest Level Read Me for Linux (Intel64) Users
                  -----------------------------------------------

                      Last Update: December 2016
                      
*** LATE BREAKING NEWS ***

The ready-to-run executables included in this distribution were built
on Ubuntu 14.04.04 LTS using Intel Composer XE Fortran, MKL and MPI 17 Update 1.

These executables also run on Centos 7. Re-compiling (really re-linking)
may be needed on earlier versions of RedHat.


=========================================================================

*** NOTES: ***

The precompiled versions of WARP3D are built for Linux using the Intel Fortran
Composer XE 2016 compiler suite and the Intel MPI (Message Passing Interface)
software system.

The Intel Fortran compiler system is ** NOT ** required on your system to use
the ready-to-run executable for threads only included in the distribution. 
The compiler system is needed only if you intend to modify the source code and
and re-build the executable.

The Intel MPI system is required to be on your computer if you use
the MPI + OpenMP executable of WARP3D included in the distribution.

============================================================================

Table of Contents
-----------------

A. Quick Overview
B. Installing the precompiled version of WARP3D
C. Quick Start Using the Ready-to-Run Executable:
     Type 1 -- Threads Only Version
D. Quick Start Using the Ready-to-Run Executable:
     Type 2 -- MPI (w/ domain decomposition + threads)
E. Re-Building the Threads-Only (Type 1)  Executable for WARP3D
   --> Needed to include your UMAT
F. Re-Building the Hybrid (MPI + Threads) (Type 2) Executable for WARP3D
   --> Needed to include your UMAT
G. Run Verification Suite   

===================================================================================

A.  Quick Overview
    --------------

WARP3D has two executables for Linux computers.

Type 1: executable is warp3d.omp (for nearly all laptop, desktop, server users)

  Parallel execution uses only threads. Most useful for laptops, desktops
  and compute servers offering shared-memory style computing. On
  traditional computing "clusters," the threads only version runs on just one
  machine in the cluster (but multiple concurrent WARP3D analysis jobs can 
  of course be run on other machines in the cluster).

  This type of parallel execution requires no domain decomposition of
  the finite element mesh. The linear equation solver is Pardiso in the Intel MKL
  library. This sparse solver has direct and iterative options. Solutions of
  finite element models having several million nodal displacements are quite
  feasible provided the computer has sufficient real memory (64GB - 128GB).

  WARP3D runs thread-parallel over element blocks in the
  model and local vector parallel at the inner loop level via vector styled
  code.

  No parts of the Intel compiler system are required to be installed on your
  computer.

Type 2: executable is warp3d.mpi_omp

  Combined ("hybrid") parallel execution. The finite element model must be
  decomposed into domains, where each domain is associated with one MPI
  process (rank).

  Designed primarily for users with distributed memory (cluster) computers.
  But also runs on laptops and desktop machines if needed.

  The user sets the number of threads that WARP3D is to use for each MPI rank.
  WARP3D runs MPI parallel over domains, thread parallel over element
  blocks in a domain, and local vector parallel at the inner loop level
  within blocks.

  Most often (1) the number of domains will be set to the number of hardware
  processors, (2) the number of threads is set to the number of cores per
  processor.

  Linear equation solver: hypre (iterative) which runs on the same
  MPI ranks as WARP3D. Each hypre rank uses the same number of threads
  as ranks in WARP3D. The Pardiso direct and iterative solvers may also
  be used during MPI execution. However, the element stiffness matrices
  are recovered to the root process, assembled and solved there. MPI
  ranks 1, 2, 3, ... are suspended while the Pardiso solver runs.

  The Intel MPI runtime system must installed on your computer.
  (No Intel Fortran compiler required).

  The patwarp program included with WARP3D performs the domain decomposition
  using Metis starting from a Patran neutral file for the model.

-----------------------------------------------------------------------------

B.  Installing the precompiled versions of WARP3D
    ---------------------------------------------

1.  We recommend you look through the README file  and this file 
    before proceeding.

2.  Obtain the WARP3D distribution for Linux/OS X from the WARP3D website:
   
             http://www.warp3d.net 

3.  Extract the tarball (for example, use: tar xvzf warp3d.....tar.gz).

4.  This will create a directory called something like "warp3d-17.8.0".

5.  Move this directory (which contains the complete WARP3D package) to the
    desired location on your filesystem. Change access permissions as desired.

6.  The precompiled executables are located in the warp3d directory under
    "run_linux_em64t". However before use, set two environment variables.

7.  Set the variable WARP3D_HOME to point to the WARP3D install directory.
    In a bash shell:

     export WARP3D_HOME= .... path to WARP3D distribution...
     
     (Use full name, e.g.,  /home/tjones/warp3d  )

    Recommendation: set this variable in your ~/.bashrc to avoid having to
    redo this step every time you open a new terminal window.

8.  Modify the variable LD_LIBRARY_PATH that enables the linker to find the
    various shared libraries included in the Linux distribution. 
    For a bash shell:

      export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH

    Recommendation: do not modify this environment variable in your
    ~/.bashrc.  Instead modify it in a "wrapper script" used
    to run WARP3D.  Example wrapper scripts are provided (files are
    warp3d_script_*).
    
9.  Pull various shared libraries from the WARP3D web site. In a bash shell,
   
       $ cd $WARP3D_HOME
       $ ./install_libs_from_remote
       
     These include the most current versions of the MKL routines in the
     redistributable package defined by Intel.
     
     The MKL libs are backward compatible with the Fortran compiler and
     hardware processors.
       
10. If you plan to use the MPI (hybrid) version, verify that MPI is set up
    properly on your Linux system. In a bash shell, 
    
       $ mpirun -version
       
    If installed and available to you, this command just prints the version number.       
         

The precompiled versions of WARP3D are now installed.

-----------------------------------------------------------------------------

C.  Quickstart: Precompiled Type-1 threads-only version
    ---------------------------------------------------

1.  Perform all the steps listed in "B" above to install the precompiled
    versions.

2.  The executable to run is "warp3d.omp" in the run_linux_em64t directory.
    Specify the number of threads at program startup.

3.  As an example:

    warp3d_exe=$WARP3D_HOME/run_linux_em64t/warp3d.omp
    cd $WARP3D_HOME/example_problems_for_READMEs
    export OMP_NUM_THREADS=4     << or a larger value
    export MKL_NUM_THREADS=4     << or a larger value
    export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH
    ulimit -s 100000   <<<   Some Linux versions will need this
    $warp3d_exe < test_18a
    $warp3d_exe < test_18b

    The first line sets a short reference to the WARP3D executable.
    Example test_18 computes extensive amounts of ductile crack growth in
    a model of an SE(B) specimen with the Gurson material model. The mesh has
    1 layer of elements in the thickness direction with plane-strain constraints.
    Part a computes half the load steps and writes a restart file. Part b
    resumes the solution using the restart file and completes a total of
    60 load steps. Parts a and b each use less than 10 secs of walltime.

    OMP_NUM_THREADS sets the number of threads for the parallel loops in
    WARP3D proper.  MKL_NUM_THREADS sets the number of threads for the Intel
    Pardiso sparse shared memory solver.  This example assumes
    the hardware supports at least 4 threads (usually a system with
    at least 4 cores). Pardiso will not use hyperthreading even if available.

    LD_LIBRARY_PATH was discussed above in section "B".

    The above example employs input redirection via the shell "<" operator.
    Similarly, output may be redirected to a file using the ">" operator, e.g.
    $warp3d_exe < test_18a > output_test_18a.

    All of the above commands  are more conveniently placed into a shell
    script for execution at the command line. The file
    warp3d_script_linux_openmp in the WARP3D directory provides a starting
    point for any further customizations.

4.  Most WARP3D users construct input files starting with Patran,
    FEMAP, Cubit or other graphical FE modeling system.
    Such programs often output a Patran compatible neutral file
    (at text file) for the model. The program patwarp.go included in
    the run_linux_64 directory converts Patran neutral files
    into WARP3D input files. The program runs interactively. Just
    start it in a terminal window and follow the on-screen
    instructions.

    A standard text editor is then used to add specialized output commands,
    compute commands, nonlinear material definitions, etc. to complete
    the input file.

5.  Chapter 7 of the User Manual includes a section about executing
    WARP3D on Linux to make use of parallel processing.



-----------------------------------------------------------------------------

D.  Quickstart: Precompiled Type-2 (MPI+threads, domain decomposition & hypre)
    --------------------------------------------------------------------------

1.  We recommend you look through the README files.

2.  Perform all steps in section "B" to install the precompiled version
    of WARP3D.

3.  The executable to run is warp3d.mpi_omp in run_linux_em64t.  Prior to
    starting execution, set the following:

    a) The number of MPI ranks for WARP3D = number of defined
       domains for the model. The hypre equation solver uses the
       same number of MPI ranks.

    b) The number of threads per rank for WARP3D. Hypre uses the
       same number of threads/rank.

4.  Example. This model uses 4 domains (MPI ranks=4) with 2 threads
    (real cores) per rank.


    cd $WARP3D_HOME/example_problems_for_READMEs
    export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH
    export NUM_WARP3D_RANKS=4
    export OMP_NUM_THREADS=2 
    export MKL_NUM_THREADS=2
    ulimit -s 100000      <<<   Some Linux versions will need this
    export MPI_TYPE_MAX=4096
    export I_MPI_PIN_DOMAIN=omp
    export I_MPI_PIN_HOST=1
    export I_MPI_FABRICS=shm:tcp
    mpirun -np $NUM_WARP3D_RANKS $WARP3D_HOME/run_linux_em64t/warp3d.mpi_omp

    The first line sets a short path to run the correct WARP3D
    executable.

    The FE model is a pre-cracked M(T) specimen with crack growth
    using cohesive zone model.

    LD_LIBRARY_PATH is discussed in section "B".

    ulimit -s 100000 increases the stack size.  This will be necessary in
    any reasonably-sized MPI problem.  The next two export commands set
    variables required for Intel MPI.  See the manual Chapter 7 for details.

    The next lines define environment variables for the Intel MPI
    runtime system. mpirun starts execution with the needed number of
    ranks. In this example, no input-output files are specified. Rank 0
    prints a header message to the terminal and posts a prompt to
    the screen awaiting input (most likely a WARP3D command
    *input from file ' ....' .

    The shell script warp3d_script_linux_hybrid in the WARP3D
    distribution includes the above commands and provides a starting
    point for further customizations. To replicate the
    above example using the script, the commands are:

    cd $WARP3D_HOME/example_problems_for_READMEs
    $WARP3D_HOME/warp3d_script_linux_hybrid 4 2 < mt_cohes_4_cpu > out

    Here the input and output files are set via < and > IO redirection.

-----------------------------------------------------------------------------

E.  Re-Building the Threads-Only (Type 1) Executable for WARP3D
    -----------------------------------------------------------

To build the threads-only version of WARP3D, a recent version of the Intel
Fortran Composer XE system must be installed. This package includes
the Intel Fortran compiler "ifort" and the MKL math library
(has the Pardiso solver). 

Steps:

1.  Perform all the steps listed in section "B" above.

2.  Add the linux_packages/lib directory to LIBRARY_PATH.
    In a bash shell:

    export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH

    We recommend putting this command in a Bash shell script that 
    drives the compile or just in the terminal window where the compile
    is done. 

3.  Put your UMAT routine and all support routines it calls into the 
    four (4) user_routines....f  files located in the src directory. 
    Please read the instructions/guidance
    in comments at the top of the existing user_routines....f files. 
    Example UMAT routines used to test the UMAT capability in 
    WARP3D are included in the distributed user_routines....f files.

4.  Change to the src directory and run the "Makewarp.bash" script.  This
    will interactively guide you through the process of compiling WARP3D.
    Make sure you select the OpenMP version.

5.  There are compile scripts in the other individual directories of WARP3D to
    recompile various tools and utility programs.  Run these scripts if you
    for some reason need a recompiled version of any of them.


Important note on LD_LIBRARY_PATH:

You must have the Intel Fortran compiler system (which includes MKL
library) installed on the machine where you run the compile/link process.
ifort expects to find all the MKL libraries where indicated by the system 
MKLROOT variable.

We include the limited MKL redistributable (runtime) libraries in the directory
$WARP3D_HOME/linux_packages/lib.  These enable people who do not have the Intel
Fortran compiler/MKL system installed to run WARP3D.

At runtime, the WARP3D executable uses the MKL libraries located in
$WARP3D_HOME/linux_packages/lib --- even if you have Intel Fortran/MKL
installed.

This is accomplished by the above command  

  export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH
  
Note that the WARP3D library is inserted BEFORE the system LD_LIBRARY_PATH
which references the installed ifort/MKL libraries if they exist.

If you want WARP3D to use the MKL libraries in the installed Intel FORTRAN/
MKL system at runtime, simply reverse the order of libraries appearing in the 
above statement. The system MKL libraries will be found first.


-----------------------------------------------------------------------------

F.  Re-Building the Hybrid (MPI + Threads) (Type 2) Executable for WARP3D
    -----------------------------------------------------------------------

To build the hybrid version of WARP3D, this Intel software must be installed:

  1.  A recent version of the Intel Fortran Composer XE system. This package
      includes the Intel Fortran compiler "ifort" and the MKL math library
      (has the Pardiso solver).

  2.  Intel's MPI distribution (impi). Our processes work correctly with
      impi 5.1 and have been tested on Centos 7
      Ubuntu 14.04 LTS. Other MPI distributions,
      such as the free and open-source OpenMPI may work, but are untested.

Steps:

1.  Perform all the steps listed in section "B" above.

2.  Add the linux_packages/lib directory to LIBRARY_PATH.
    In a bash shell:

    export LD_LIBRARY_PATH=$WARP3D_HOME/linux_packages/lib:$LD_LIBRARY_PATH

    We recommend putting this command in a Bash shell script that 
    drives the compile or just in the terminal window where the compile
    is done. 
    
3.  You may wish to recompile (not required) two of the open-source
    external libraries used in the MPI version of WARP3D: hypre and METIS.
    To do this, navigate to the linux_packages/source directory
    and run the compile scripts found in the folders:

    hypre-2.7.0b
    metis-4.0

    You will be guided through the process interactively.

4.  Change to the src directory and run the "Makewarp.bash" script.  This
    will interactively guide you through the process of compiling WARP3D.
    Make sure to select the hybrid version.

4.  There are compile scripts in the other individual directories of WARP3D to
    recompile various tools and utility programs.  Run these scripts if you
    for some reason a recompiled version is needed.

Important note on LD_LIBRARY_PATH:

See discussion on this in previous section.


G.  Run the Verifications Suite of Test Problems
    --------------------------------------------

1. The directory verification has a number of problems to exercise
   a broad coverage of the WARP3D code.

2. Once WARP3D is installed and tested, the
   verification problems may be executed. 

3. The Bash shell script run_tests.bash runs analyses using threads only 
   parallel execution. The script runs interactively and prompts for
   various information. After an analysis is completed, the script examines
   output files to insure the result match know good solutions.

4. The bash shell script run_mpi_tests.bash runs analyses using MPI+threads
   parallel execution. The script runs interactively and prompts for
   various information. After an analysis is completed, the script examines
   output files to insure the result match know good solutions.    
   

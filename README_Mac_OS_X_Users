

        Highest Level Read Me for MacOS  Users File for WARP3D
        ------------------------------------------------------

                      Last Update: September 5, 2017

==========================================================================

*** Latest NOTES: ***

WARP3D is built for MacOS using the Intel Fortran Composer XE 2017
Update 2 compiler suite version ifort and concurrent MKL.

The Intel compiler is * NOT * required on your system to use the
ready-to-run executable included in the distribution. The
compiler is needed only if you intend to modify the source code and
and re-build the executable.

This distribution was built & verified on MacOS 10.12.5 (Sierra)

We build the executable using statically-linked MKL libraries.
These executables run across all Macs dating from 2011
(laptops, iMacs, MacPros).

See notes at top of README for processor levels supported in this release
and going forward.

============================================================================

Quick Start Using the Ready-to-Run Executable
---------------------------------------------

1. We recommend that you look thru the README file first for information on
   downloading and installing WARP3D for MacOS in README Section 1.

2. The WARP3D files are all located in the
   directory "warp3d_distribute_###" created by the unzip process
   and where the ### will indicate the code version.

   Key points:
      - the WARP3D distribution directory can be placed anywhere
        on your system.
      - just click on the ...tar.gz file in the Finder to uncompress and
        untar the distribution
      - the unzip process does NOT create directories/files
        in any other locations on your system.
      - Administrator access is NOT required to
        unzip/install unless the distribution directory is to
        be located in a system level directory, e.g., Applications

2. The WARP3D distribution includes a ready-to-run executable.
   This file (warp3d.omp) is located in the run_mac_os_x subdirectory.
   This is a statically-linked executable.

3. WARP3D does not have a graphical user interface (GUI). The program
   is initiated from the command line in a shell program.
   On MacOS this means the Terminal program which starts a bash shell.

4. The MacOS version of WARP3D supports parallel execution in all areas thru
   threads only. At this time, we do not support MPI execution
   on MacOS. The Paradiso solver from the Intel MKL library is included
   in WARP3D and provides very high performance in its sparse direct and sparse
   iterative algorithms on multi-processor, multi-core Apple computers.

5. To run WARP3D, open a standard Terminal window. The example
   below assumes you have installed the WARP3D
   distribution in the directory /Users/name/warp3d (shortened name from the
   as distributed warp3d_distribute_...). Here, "name" is your login id.
   This example changes to the example problems directory and starts execution
   to run test_18  (crack growth in a SEB specimen using Gurson cell
   elements).

    warp3d_exe="/Users/name/warp3d/run_mac_os_x/warp3d.omp"
    cd ~name/warp3d/example_problems_for_READMEs
    export OMP_NUM_THREADS=4
    export MKL_NUM_THREADS=4
    $warp3d_exe <test_18a
    $warp3d_exe <test_18b

   The first line defines a short reference to the WARP3D executable.
   Example test_18 computes extensive amounts of ductile crack growth in
   a model of an SE(B) specimen with the Gurson material model. The mesh has
   1 layer of elements in the thickness direction with plane-strain constraints.
   Part a computes about half the laod steps and writes a restart file. Part b
   resumes the solution using the restart file and completes a total of
   60 load steps. Both parts a and b use less than 10 secs of wall time.

   The above commands set the number of threads = 4 for use by WARP3D and by
   the Intel MKL sparse solver. WARP3D processes blocks of elements
   in parallel, e.g., during stiffness and stress updating. In the example here,
   it is assumed that the Mac computer has at least 4 (physcial) cores available
   for executing the WARP3D analysis. We recommend to NOT use the
   hyper-threading option. Increase the number of threads for
   Mac Pros with more cores.

   The above command sequence starts WARP3D execution with input
   taken from the file test_18a. All output is sent to the Terminal window.
   Add > test_18_out to re-direct WARP3D output to a file.

   Various bash shell commands can also be placed into a file to
   run in batch mode.

   We provide a sample bash shell script to start WARP3D in the Terminal
   program. The file is: warp3d_script_mac_os_x and is located at the highest
   level of the WARP3D distribution directory. Modify this script as needed and
   put in a convenient location. The script requires the existence of an
   environment variable WARP3D_HOME. Most users will define this variable in
   their ~/.bash_profile with a statment of the form:

         export WARP3D_HOME=/Users/name/warp3d

6. Most WARP3D users construct input files starting with Patran, Cubit,
   FEMAP, etc modeling systems.
   Such programs output a Patran compatible neutral file
   for the model. The program patwarp.go included in
   the run_mac_os_x directory converts Patran neutral files
   into WARP3D input files. This program runs interactively. Just
   start it in a Terminal window and follow the on-screen
   instructions.

   A standard text editor is then used to add specialized output commands,
   compute commands, nonlinear material definitions, etc. to complete
   the input file.

8. Chapter 7 of the User Manual includes a section on executing
   WARP3D on MacOS to make use of multi-cores/processors. Please
   refer to that section for the latest information to execute
   WARP3D on MacOS systems. The first section of Chapter 7
   describes the general concepts of parallel execution implemented
   into WARP3D.

Re-Building the Mac MacOS Executable for WARP3D
-----------------------------------------------

1. The Intel FORTRAN Composer XE system must be installed on MacOS.
   This software includes the Math Kernel Library (MKL) and the Pardiso solver.
   The "ifort" command must be recognized in a Terminal shell.

   At present, we use Composer XE 2017 Update 2.
   Older versions may also work * BUT * optimization issues may arise.
   With each release of the compiler, we tweak optimization levels (-O#)
   in the makefile. We experiment with the key *.f files to obtain
   correct execution at the highest optimization level for this release
   of the compiler. The highest levels that produce code do vary
   between compiler releases.

2. Add an environment variable called WARP3D_HOME which points to the directory
   you unpacked WARP3D into. For the bash shell

         export WARP3D_HOME=/Users/name/warp3d

   You will likely want to add this command to your ~/.bash_profile
   so that it will be done automatically at login.

3. Put your UMAT routine and all support routines it calls into the
   four (4) user_routines....f  files located in the src directory.
   Please read the instructions/guidance
   in comments at the top of the existing user_routines....f files.
   Example UMAT routines used to test the UMAT capability in
   WARP3D are included in the distributed user_routines....f files.

4. Change to the src directory of the WARP3D distribution and invoke the
   Makewarp.bash script in a Terminal (bash) window. Answer the questions. A
   standard makefile is executed to complete the build process. The
   new executable is located in the directory run_mac_os_x. The script does
   extensive checking to ensure your Mac has the proper software and
   environment variables needed to build WARP3D.

5. Other software tools are included in the distribution, e.g. the Patran -to-
   WARP3D translator program. And warp3d2exii that builds an Exodus .exo file
   for the model and computed results. Each of these tools is located
   in a separate directory and has a compile script similar to Makewarp.bash.

Running Verification Suite of Analyses
--------------------------------------

1. The directory "verification" has a number of problems to exercise
   a broad coverage of the WARP3D code.

2. Once WARP3D is installed and tested, the
   verification problems may be executed.

3. The Bash shell script run_tests.bash runs analyses using threads only
   parallel execution. The script runs interactively and prompts for
   various information. After an analysis is completed, the script examines
   output files to insure the results match known good solutions.
   Clear messages are output if the solutions do not match - shows the
   computed value and the known good value.




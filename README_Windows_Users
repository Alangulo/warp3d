

               Highest Level README for Windows Users

                last Update: January 22, 2016
                             cleanup
                             continued issues with libiomp5md.dll
                             now using Intel Fortran 2016

==========================================================================

*** NOTES: ***

WARP3D is built for Windows using the Intel Fortran Composer XE 
Version 16.0.1.

The Intel compiler is * NOT * required on your system to use the
ready-to-run executable included in the distribution. The
compiler is needed only if you intend to modify the source code and
and re-build the executable.

This distribution was built & verified on Windows 7 SP!. The executable should 
run on all W7, W8, w10.

We build the executable using statically-linked MKL libraries and
compiler options for generic Intel processors.

If you have the Intel compiler system installed, you likely will gain some 
additional performance by re-compiling. The re-building scripts included in 
the distribution request compiling for optimal performance on the current 
hardware (we remove that option to build the executables for distribution).


==========================================================================

Quick Start Using the Ready-to-Run Executable
---------------------------------------------

1. We recommend that look thru the README file first
   for information on downloading and installing WARP3D for Windows
   in the README file Section 1.

2. The WARP3D files are all located in the
   directory "warp3d_distribute_###" created by the unzip process
   and where the ### will indicate the code version.

   Key points:

      - the WARP3D distribution directory can be placed anywhere
        on your system

      - the unzip process does NOT create directories/files
        in any other locations on your system

      - the unzip process does NOT modify the Windows Registry

      - System administrator access is NOT required to
        unzip/install unless the distribution directory is to
        be located in a system level directory.

2. The WARP3D distribution includes a ready-to-run executable
   (64-bit) located in the run_windows_64 subdirectory.
   This executable has been created and tested on Windows 7 SP1
   updated thru the date posted at top of document.

3. WARP3D does not have a graphical user interface (GUI). The program
   is initiated from the command line in a shell program.
   
   On Windows, this will often be the "command prompt". We use, and
   highly recommend, the freely available Cygwin environment
   for Windows that provides provides bash, csh, and ksh shells that
   operate as they do on Linux systems (but this not required).

4. The Windows version of WARP3D supports parallel execution thru
   threads only. At this time, we do not support MPI execution
   on Windows.
   
5. We continue to have issues on some Windows 7 machines with the 
   system dll:  libiomp5md.dll
   We include a current version of this DLL in the run_windows_64
   directory. 
        
   In some instances, we see that WARP3D fails to start properly 
   with a Windows pop-up window saying: The Application Failed to 
   Start Properly ...
        
   Renaming libiomp5md.dll to save_libiomp5md.dll fixes the problem.

6. To run WARP3D using the built-in Windows software,
   open a standard "command shell" using any technique you know 
   [on W7, click Start and type the word command in search box. 
   The Command shell is at top of list]. The example below assumes you 
   have installed the WARP3D distribution in the directory c:\warp3d 
   (shortened name from the as distributed name warp3d_distribute_...).
   The example here changes to the example problems directory 
   and starts execution to run test_18 (crack growth in a SEB specimen 
   using Gurson cell elements).

    set warp3d="c:\warp3d\run_windows_64\warp3d.exe"
    cd c:\warp3d\example_problems_for_READMEs
    set OMP_NUM_THREADS=4
    set MKL_NUM_THREADS=4
    %warp3d% <test_18a
    %warp3d% <test_18b

   Above we use the "set" command to define a convenient, short reference to the
   WARP3D executable. Example test_18 computes extensive
   amounts of ductile crack growth in a model of an SE(B) specimen with the
   Gurson material model. The mesh has 1 layer of elements in the thickness
   direction with plane-strain constraints.
   Part a computes about half the laod steps and writes a restart file.
   Part b resumes the solution using the restart file and completes a total of
   60 load steps. Both parts a and b use less than 60 secs of wall time.

   The above commands set the number of threads = 4 for use by WARP3D and by
   the Intel MKL sparse solver. WARP3D processes blocks of elements
   in parallel, e.g., during stiffness and stress updating. In the example
   here it is assumed that the computer has at least 4 cores available
   for executing the WARP3D analysis. We recommend to NOT use the
   hyper-threading option on newer machines.

   The above command sequence starts WARP3D execution with input
   taken from the file test_18a. All output is sent to the command shell
   window. Add > test_18_out to re-direct WARP3D output to a file.

   Various Windows shell commands can also be placed into a *.bat
   file to run in batch mode.

7. We find the Windows Command Prompt shell to be awkward and highly
   recommend that users install the free Cygwin system. Then use
   conventional bash, csh, tcsh shells to execute WARP3D.

8. Most WARP3D users construct input files starting with Patran, Cubit,
   FEMAP, etc modeling systems. Such programs output a Patran compatible 
   neutral file for the model. The program patwarp_windows.exe included in
   the run_windows_64 directory converts Patran neutral files
   into WARP3D input files. This program runs interactively. Just
   start it in a command shell and follow the on-screen
   instructions.
   
   A standard text editor (e.g. NotePad++) is then used to add specialized
   output commands, compute commands, nonlinear material definitions,
   etc. to complete the input file.
   
   We often find that users have created specialized mesh generators for 
   their class of models - such programs may be readily extended to output
   directly a WARP3D input file.

9. Chapter 7 of the User Manual includes a section on executing
   WARP3D in Windows to make use of multi-cores/processors. Please
   refer to that section for the latest information to execute
   WARP3D on Windows systems. The first section of Chapter 7
   provides a tutorial on general concepts of parallel execution implemented
   into WARP3D.


Re-Building the Windows Executable for WARP3D
---------------------------------------------

1. The Intel Visual Fortran Composer XE system must be installed.
   This software includes the Math Kernel Library (MKL) with the Pardiso solver.

2. To simplify the process of setting up the proper environment and running the
   Intel compiler, on our systems we create a shortcut to a 
   standard Windows command shell on the desktop for convenience. 
   We make one of these with name Fort2015 (to use the older 2015 Intel Compiler)
   and Fort2016 use the newest release of the compiler. 
   
   
   2A.  For Fort2016, we access Properties of the command shell and set the Target as:
   
   C:\Windows\System32\cmd.exe /K ""c:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\bin\ifortvars.bat"  intel64"

   and set the "Start In" directory as:

    c:\warp3d\src

   or where ever you have have WARP3D installed.
   

   2B.  For Fort2015, we access Properties of the command shell and set the Target as:

   C:\Windows\System32\cmd.exe /K ""c:\Program Files (x86)\Intel\Composer XE\bin\compilervars.bat"  intel64"

   and set the "Start In" directory as:

    c:\warp3d\src

   or where ever you have have WARP3D installed.
  

3.  Put your UMAT routine and all support routines it calls into the 
    four (4) user_routines....f  files located in the src directory. 
    Please read the instructions/guidance
    in comments at the top of the existing user_routines....f files. 
    Example UMAT routines used to test the UMAT capability in 
    WARP3D are included in the distributed user_routines....f files.

4. At the usual prompt in the command shell window for Fort2016 or Fort2015, 
   enter the command:

   Makewarp.bat

   to build the executable. The bat script places the generated executable
   into the warp3d\run_windows_64 directory.
   
   The Makewarp.bat program must be able to locate the Windows 
   program: nmake.exe  (Windows variant of Linux make). It checks this location:
   
   c:\Program Files (x86)\Microsoft Visual Studio 10.0\Intel Fortran\Microsoft Files\VC\Bin\nmake.exe
   
   If your system has nmake.exe in a different location, please change the
   top commands in Makewarp.bat to use the correct location.
   
5. Other software tools are included in the distribution, e.g.
   the Patran -to- WARP3D translator program. Source code for each
   of these tools is located in a separate directory and has 
   a compile script similar to Makewarp.bat.
   
  

Running Verification Suite of Analyses
--------------------------------------

1. The directory "verification" has a number of problems to exercise
   a broad coverage of the WARP3D code.

2. The Bash shell and the Perl programs must be available to use
   the run_tests.bash script to drive execution of the verification problems.

3. The Bash shell, Perl and many other standard Linux tools are available for
   Windows in the free CYGWIN software system (www.cygwin.com).

4. In the ~/.bash_profile file run by the Bash shell at start up of the
   shell window, add the statement to define the WARP3D
   home directory for your system. Example:

        export WARP3D_HOME=c:/local_programs/warp3d
        
   where c:/local_programs... is replaced by the actual location used.

5. The supplied Bash shell script: warp3d_script_windows may be
   used within a Bash shell window to start execution of WARP3D

     $WARP3D_HOME/warp3d_script_windows # < input  > output

   where # is replaced by the number of threads for parallel execution.

6.  Run the shell script run_tests.bash and follow the interactive 
    prompts. The script runs selcted problems an checks output for
    correctness.


c 
c Simple example to illustrate/test use of the cohesive zone
c material model and the interface elements.
c
c Model has only interface-cohesive elements (type: inter_8).
c -----------------------------------------------------------
c
c This example drives the cohesive-interface elements in 
c combined constant shear and normal tractions in load control.
c 
c Model is a 1 in. x 1 in. mesh of 3 x 3 square 8-node interface
c elements connected to a Z = 0 symmetry plane.
c
c The interface elements have a very small thickness for convenience
c that does not affect the computed results.
c
c Interface element nodes on Z = 0 are constrained to have v = 0 
c and w = 0. the v = 0 is req'd for shear Y loading. 
c The w = 0 is req'd for normal Z loading.
c
c set u = 0 on X = 0 nodes to eliminate rigid translation
c
c two sets of nodal loads are defined to impose (1) a uniform
c normal traction in +Z-direction, (2) a uniform shear 
c traction in the +Y-direction. 
c
c Large displacement analysis does not apply since there
c no adjacent solid elements to change the shape of the cohesive
c surfaces.
c
structure solid
c
 material exp1_matl $ exponential option
  properties cohesive exp1_intf,
    sig_peak 5.0 delta_peak 0.067957046 beta 1.0
c
material ppr_mat  $  PPR option
 properties cohesive ppr,
    sig_peak 5.0 tau_peak 5.0 G_normal 1.85,
    G_shear 1.85 shape_normal 7.0 shape_shear 7.0,
    ratio_normal 0.1 ratio_shear 0.1 
c
 material linear_matl $ linear-elastic option
   properties cohesive linear_intf,
       stiffn 200 stifft 200 stiffs 200 
c
number of nodes 32 elements 9
c
coordinates
*echo off
      1  0.000000000E+00  0.100000000E+01  0.000000000E+00
      2  0.000000000E+00  0.666666687E+00  0.999990501E-03
      3  0.000000000E+00  0.666666687E+00  0.000000000E+00
      4  0.000000000E+00  0.333333343E+00  0.999990501E-03
      5  0.000000000E+00  0.000000000E+00  0.999990501E-03
      6  0.000000000E+00  0.333333343E+00  0.000000000E+00
      7  0.000000000E+00  0.000000000E+00  0.000000000E+00
      8  0.333333343E+00  0.100000000E+01  0.999990501E-03
      9  0.333333343E+00  0.100000000E+01  0.000000000E+00
     10  0.333333343E+00  0.666666687E+00  0.999990501E-03
     11  0.333333343E+00  0.666666687E+00  0.000000000E+00
     12  0.333333343E+00  0.333333343E+00  0.999990501E-03
     13  0.333333343E+00  0.000000000E+00  0.999990501E-03
     14  0.333333343E+00  0.333333343E+00  0.000000000E+00
     15  0.333333343E+00  0.000000000E+00  0.000000000E+00
     16  0.666666687E+00  0.100000000E+01  0.999990501E-03
     17  0.100000000E+01  0.100000000E+01  0.999990501E-03
     18  0.666666687E+00  0.100000000E+01  0.000000000E+00
     19  0.100000000E+01  0.100000000E+01  0.000000000E+00
     20  0.666666687E+00  0.666666687E+00  0.999990501E-03
     21  0.666666687E+00  0.333333343E+00  0.999990501E-03
     22  0.666666687E+00  0.000000000E+00  0.999990501E-03
     23  0.100000000E+01  0.666666687E+00  0.999990501E-03
     24  0.100000000E+01  0.333333343E+00  0.999990501E-03
     25  0.666666687E+00  0.666666687E+00  0.000000000E+00
     26  0.666666687E+00  0.333333343E+00  0.000000000E+00
     27  0.100000000E+01  0.000000000E+00  0.999990501E-03
     28  0.666666687E+00  0.000000000E+00  0.000000000E+00
     29  0.100000000E+01  0.666666687E+00  0.000000000E+00
     30  0.100000000E+01  0.000000000E+00  0.000000000E+00
     31  0.100000000E+01  0.333333343E+00  0.000000000E+00
     32  0.000000000E+00  0.100000000E+01  0.999990501E-03
*echo on
elements
  1-9 type inter_8 linear material ppr_mat order '2x2gs'
c
incidences 
       1      25      29      19      18      20      23      17      16
       2      26      31      29      25      21      24      23      20
       3      28      30      31      26      22      27      24      21
       4       7      15      14       6       5      13      12       4
       5      15      28      26      14      13      22      21      12
       6       6      14      11       3       4      12      10       2
       7      14      26      25      11      12      21      20      10
       8       3      11       9       1       2      10       8      32
       9      11      25      18       9      10      20      16       8
blocking
       1       9       1
c
constraints
  plane z=0 w 0  $ if interface elements made thinner, the search will think
c                      their nodes are also on z=0
  plane z=0 v 0
  plane x=0 symmetry
c
 loading unit_axial_z $ in case other loads are needed
   nodal loads
       20      23      17      16 force_z 0.0277777777
       21      24      23      20 force_z 0.0277777777
       22      27      24      21 force_z 0.0277777777
        5      13      12       4 force_z 0.0277777777
       13      22      21      12 force_z 0.0277777777
        4      12      10       2 force_z 0.0277777777
       12      21      20      10 force_z 0.0277777777
        2      10       8      32 force_z 0.0277777777
       10      20      16       8 force_z 0.0277777777
c
loading unit_shear_yz $ (imposes a very near tau_yz = -1.0)
   nodal loads
       20      23      17      16 force_y 0.0277777777
       21      24      23      20 force_y 0.0277777777
       22      27      24      21 force_y 0.0277777777
        5      13      12       4 force_y 0.0277777777
       13      22      21      12 force_y 0.0277777777
        4      12      10       2 force_y 0.0277777777
       12      21      20      10 force_y 0.0277777777
        2      10       8      32 force_y 0.0277777777
       10      20      16       8 force_y 0.0277777777
c
loading test
  nonlinear
   steps 1-3 unit_shear_yz 1 unit_axial_z 1.0
c
nonlinear analysis parameters
   solution technique direct sparse
   maximum iterations 5
   minimum iterations 1 
   convergence test norm res tol 0.001 
   time step  1.0e6
   trace solution on    
   adaptive solution off 
   batch messages off
   extrapolate off        
   material messages off
   show details on     
   consistent q-matrix off
c
compute displacements for loading test step 1
output wide displacements for nodes 5 32, 27 17
c
compute displacements for loading test step 2
output wide displacements for nodes 5 32, 27 17
c
compute displacements for loading test step 3
output wide displacements for nodes 5 32, 27 17
stop
